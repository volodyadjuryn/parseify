# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    _instanceof:
        App\Repository\ProductRepositoryInterface:    
            tags: ['app.repository.product_repository']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    
    App\Controller\:
        resource: '../src/Controller/'
        tags: [ 'controller.service_arguments' ]
        
    App\Writer\CsvProductWriter:
        arguments:
            $filePath: '/app/storage/products.csv'
    
    App\Repository\ProductRepositoryInterface: '@App\Repository\ProductRepositoryManager'
    App\Repository\ProductRepositoryManager:
        arguments:
            - !tagged_iterator app.repository.product_repository
    
    App\Parser\SolmarParser:
        tags:
            - { name: 'app.parser', domain: 'solmar.com.ua' }
    
    
    App\Parser\Parser: '@App\Parser\ParserManager'
    
    App\Parser\ParserManager:
        arguments:
            - !tagged_iterator { tag: 'app.parser', index_by: 'domain' }
    
    League\Fractal\Serializer\JsonApiSerializer: ~
    App\Pagination\PaginationUrlGenerator: ~
    League\Fractal\Manager:
        calls:
            -   setSerializer: [ '@League\Fractal\Serializer\JsonApiSerializer' ]
            
        
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
